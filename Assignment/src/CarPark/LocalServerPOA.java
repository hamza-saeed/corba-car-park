package CarPark;


/**
* CarPark/LocalServerPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from CarPark.idl
* Monday, 1 April 2019 16:56:03 o'clock BST
*/

public abstract class LocalServerPOA extends org.omg.PortableServer.Servant
 implements CarPark.LocalServerOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("_get_location", new java.lang.Integer (0));
    _methods.put ("_get_log", new java.lang.Integer (1));
    _methods.put ("_get_listOfEntryGates", new java.lang.Integer (2));
    _methods.put ("_get_listOfPayStations", new java.lang.Integer (3));
    _methods.put ("_get_listOfExitGates", new java.lang.Integer (4));
    _methods.put ("registerLocalServer", new java.lang.Integer (5));
    _methods.put ("vehicle_in", new java.lang.Integer (6));
    _methods.put ("vehicle_out", new java.lang.Integer (7));
    _methods.put ("vehicle_payment", new java.lang.Integer (8));
    _methods.put ("vehicle_in_car_park", new java.lang.Integer (9));
    _methods.put ("vehicle_already_paid", new java.lang.Integer (10));
    _methods.put ("return_cash_total", new java.lang.Integer (11));
    _methods.put ("add_entry_gate", new java.lang.Integer (12));
    _methods.put ("add_exit_gate", new java.lang.Integer (13));
    _methods.put ("add_pay_station", new java.lang.Integer (14));
    _methods.put ("updateEntryGate", new java.lang.Integer (15));
    _methods.put ("updatePayStation", new java.lang.Integer (16));
    _methods.put ("updateExitGate", new java.lang.Integer (17));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // CarPark/LocalServer/_get_location
       {
         String $result = null;
         $result = this.location ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 1:  // CarPark/LocalServer/_get_log
       {
         CarPark.ParkingTransaction $result[] = null;
         $result = this.log ();
         out = $rh.createReply();
         CarPark.Log_of_parking_transactionsHelper.write (out, $result);
         break;
       }

       case 2:  // CarPark/LocalServer/_get_listOfEntryGates
       {
         CarPark.Machine $result[] = null;
         $result = this.listOfEntryGates ();
         out = $rh.createReply();
         CarPark.List_of_entryGatesHelper.write (out, $result);
         break;
       }

       case 3:  // CarPark/LocalServer/_get_listOfPayStations
       {
         CarPark.Machine $result[] = null;
         $result = this.listOfPayStations ();
         out = $rh.createReply();
         CarPark.List_of_payStationsHelper.write (out, $result);
         break;
       }

       case 4:  // CarPark/LocalServer/_get_listOfExitGates
       {
         CarPark.Machine $result[] = null;
         $result = this.listOfExitGates ();
         out = $rh.createReply();
         CarPark.List_of_exitGatesHelper.write (out, $result);
         break;
       }

       case 5:  // CarPark/LocalServer/registerLocalServer
       {
         String machineName = in.read_string ();
         this.registerLocalServer (machineName);
         out = $rh.createReply();
         break;
       }

       case 6:  // CarPark/LocalServer/vehicle_in
       {
         String carReg = in.read_string ();
         boolean $result = false;
         $result = this.vehicle_in (carReg);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 7:  // CarPark/LocalServer/vehicle_out
       {
         String reg = in.read_string ();
         boolean $result = false;
         $result = this.vehicle_out (reg);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 8:  // CarPark/LocalServer/vehicle_payment
       {
         String reg = in.read_string ();
         String paystationName = in.read_string ();
         short hrsStay = in.read_short ();
         double amountPaid = in.read_double ();
         boolean $result = false;
         $result = this.vehicle_payment (reg, paystationName, hrsStay, amountPaid);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 9:  // CarPark/LocalServer/vehicle_in_car_park
       {
         String registration_number = in.read_string ();
         boolean $result = false;
         $result = this.vehicle_in_car_park (registration_number);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 10:  // CarPark/LocalServer/vehicle_already_paid
       {
         String registration_number = in.read_string ();
         boolean $result = false;
         $result = this.vehicle_already_paid (registration_number);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 11:  // CarPark/LocalServer/return_cash_total
       {
         double $result = (double)0;
         $result = this.return_cash_total ();
         out = $rh.createReply();
         out.write_double ($result);
         break;
       }

       case 12:  // CarPark/LocalServer/add_entry_gate
       {
         CarPark.Machine machine = CarPark.MachineHelper.read (in);
         this.add_entry_gate (machine);
         out = $rh.createReply();
         break;
       }

       case 13:  // CarPark/LocalServer/add_exit_gate
       {
         CarPark.Machine machine = CarPark.MachineHelper.read (in);
         this.add_exit_gate (machine);
         out = $rh.createReply();
         break;
       }

       case 14:  // CarPark/LocalServer/add_pay_station
       {
         CarPark.Machine machine = CarPark.MachineHelper.read (in);
         this.add_pay_station (machine);
         out = $rh.createReply();
         break;
       }

       case 15:  // CarPark/LocalServer/updateEntryGate
       {
         String machineName = in.read_string ();
         boolean enabled = in.read_boolean ();
         this.updateEntryGate (machineName, enabled);
         out = $rh.createReply();
         break;
       }

       case 16:  // CarPark/LocalServer/updatePayStation
       {
         String machineName = in.read_string ();
         boolean enabled = in.read_boolean ();
         this.updatePayStation (machineName, enabled);
         out = $rh.createReply();
         break;
       }

       case 17:  // CarPark/LocalServer/updateExitGate
       {
         String machineName = in.read_string ();
         boolean enabled = in.read_boolean ();
         this.updateExitGate (machineName, enabled);
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:CarPark/LocalServer:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public LocalServer _this() 
  {
    return LocalServerHelper.narrow(
    super._this_object());
  }

  public LocalServer _this(org.omg.CORBA.ORB orb) 
  {
    return LocalServerHelper.narrow(
    super._this_object(orb));
  }


} // class LocalServerPOA
