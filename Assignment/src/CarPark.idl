module CarPark {

    struct Date {
        long day;
        long month;
        long year;
    };

    struct Time {
        long hr;
        long min;
        long sec;
    };

    enum EventType {
    Entered, Paid, Exited
    };

    struct VehicleEvent {
        Time time;
    	Date date;
    	string registration_number;
    	EventType event;
    };

    struct Ticket {
        string registration_number;
        double amountPaid;
        Date dateEntered;
        Time timeEntered;
        Date dateToLeave;
        Time timeToLeave;
    };

    struct Machine {
        string name;
        string ior;
        boolean enabled;
    };

        typedef sequence<VehicleEvent> Log_of_vehicle_events;
        typedef sequence<Ticket> Log_of_tickets;
        typedef sequence<Machine> List_of_entryGates;
        typedef sequence<Machine> List_of_exitGates;
        typedef sequence<Machine> List_of_payStations;


    interface EntryGate {

        readonly attribute string machine_name;
        void registerGate(in string machineName, in string ior);
        void car_entered(in string reg, in Date date, in Time time);
        void turn_on();
        void turn_off();
        void reset();

    };

    interface ExitGate {

        readonly attribute string machine_name;
        void registerGate(in string machineName, in string ior);
        void car_exited(in string reg, in Date date, in Time time);
        void turn_on();
        void turn_off();
        void reset();

    };

     interface  HQServer {
        void raise_alarm(in VehicleEvent event);
        void register_local_server(in Machine machine);
        List_of_entryGates returnEntryGates();
        List_of_payStations returnPayStations();
        List_of_exitGates returnExitGates();
        void turn_off_entry_gate();

     };



    interface  LocalServer {
        readonly attribute string location;
        readonly attribute Log_of_vehicle_events log;
        readonly attribute List_of_entryGates listOfEntryGates;
        readonly attribute List_of_payStations listOfPayStations;
        readonly attribute List_of_exitGates listOfExitGates;
        void registerLocalServer(in string machineName, in string ior);
        void vehicle_in(in VehicleEvent event);
        void vehicle_out(in VehicleEvent event);
        boolean vehicle_paid(in VehicleEvent event);
        boolean add_Ticket(in Ticket newTicket);
        boolean vehicle_in_car_park(in string registration_number);
        boolean vehicle_already_paid(in string registration_number);
        double return_cash_total();
        void add_entry_gate(in Machine machine);
        void add_exit_gate(in Machine machine);
        void add_pay_station(in Machine machine);
        };

    interface  PayStation {
        readonly attribute string machine_name;
        void registerPaystation(in string machineName, in string ior);
        void turn_on();
        void turn_off();
        void reset();
        boolean checkVehicleInCarPark(in string carReg);
        boolean createTicket(in Ticket newTicket);
        boolean pay(in string carReg, in Date payDate, in Time payTime, in long duration);
        long return_cash_total();
    };
};
